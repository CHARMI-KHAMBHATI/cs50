0.What is pneumonoultramicroscopicsilicovolcanoconiosis?
a lung disease caused by inhaling very fine ash and sand dust.

1.According to its man page, what does getrusage do?
Getrusage returns information about all the resources used by the current thread. 
There is a structure of detailed information returned by the function.
 It can be used to benchmark performance.

2.Per that same man page, how many members are in a variable of type struct rusage?
There are 16 members in a structure.

3.Why do you think we pass before and after by reference (instead of by value) to calculate, even though we’re not changing their contents?
to reduce execution time.

4.Explain as precisely as possible, in a paragraph or more, how main goes about reading words from a file. In other words, convince us that you indeed understand how that function’s for loop works.
 After loading a textfile and a dictionary,
 main() function starts reading a text symbol-by-symbol, with a goal of constructing separate words.
 A word is completed when one or more alphabetic symbols are read, and we encounted a non-alphanumeric character .
 Then we check our word for misspellings, reset the word index to zero, and continue the symbol reading loop.
 If we encounter a digit, or a string tends to be too long, we traverse this word in the text, but we won't check it for misspellings.

5.Why do you think we used fgetc to read each word’s characters one at a time rather than use fscanf with a format string like "%s" to read whole words at a time? Put another way, what problems might arise by relying on fscanf alone?
There are several problems with fscanf - 
    1. you must allocate a memory for a string before reading it from file, and there are no limits of a length of a word in a text file. 
    2. you can't write program logic for skipping alphanumeric words, like this implementation of speller has.

6.Why do you think we declared the parameters for check and load as const?
 Those parameters are never intented to be modified in the functions, so we wrote an other layer of ensuring this behavior.
 
7.What data structure(s) did you use to implement your spell-checker? Be sure not to leave your answer at just "hash table," "trie," or the like. Expound on what’s inside each of your "nodes."
 A hash table with 1000000 buckets. Inside each bucket is a node or list of nodes and inside
  the nodes contain the word string and the pointer to the next node.
  
8.How slow was your code the first time you got it working correctly?
total .9

9.What kinds of changes, if any, did you make to your code in order to improve its performance?
no change

10.do you feel that your code has any bottlenecks that you were not able to chip away at?
yes